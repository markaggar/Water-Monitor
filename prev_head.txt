###############################################################################
# Water Monitor Automation Package (Example)
#
# Drop this file (rename if desired) into your Home Assistant `packages/` folder
# and ensure `homeassistant: packages: !include_dir_named packages` is enabled.
#
# Zero / minimal user edits expected:
# - Adjust notification service if not `notify.mark`.
# - Optionally tweak helper default values below.
# - For extremely large installs you may wish to scope the state_changed event
#   trigger, but it is fine for typical homes.
#
# This package auto-discovers Water Monitor leak detectors, valve + context,
# and session metrics. It sends actionable notifications, supports snooze,
# synthetic/test mode handling, valve reminders, high-usage alerts, and
# upstream health degradation notices.
###############################################################################

#############################
# Helpers (user adjustable) #
#############################
input_boolean:
  water_monitor_notifications_enabled:
    name: Water Monitor Notifications Enabled
    icon: mdi:bell
    initial: true
  water_monitor_test_mode:
    name: Water Monitor Test Mode
    icon: mdi:flask
    initial: false

input_number:
  water_monitor_large_session_volume:
    name: Water Monitor Large Session Volume (gal)
    min: 1
    max: 1000
    step: 1
    mode: box
    initial: 25
  water_monitor_valve_reminder_interval:
    name: Water Monitor Valve Reminder Interval (min)
    min: 1
    max: 180
    step: 1
    mode: box
    initial: 10
  water_monitor_snooze_minutes:
    name: Water Monitor Snooze Minutes
    min: 5
    max: 240
    step: 5
    mode: box
    initial: 30

input_datetime:
  water_monitor_snooze_until:
    name: Water Monitor Snooze Until
    has_date: true
    has_time: true
  water_monitor_last_leak_reminder:
    name: Water Monitor Last Leak Reminder
    has_date: true
    has_time: true

###############################
# Template Sensors (optional) #
###############################
template:
  - trigger: []  # purely template-based
    sensor:
      - name: Water Monitor Any Leak Active
        unique_id: water_monitor_any_leak_active
        state: >
          {% set leaks = states.binary_sensor | selectattr('state','eq','on')
              | selectattr('attributes.device_class','defined')
              | selectattr('attributes.device_class','eq','problem')
              | selectattr('entity_id','search','_low_flow_leak|_tank_refill_leak|_intelligent_leak') | list %}
          {{ 'on' if leaks|length > 0 else 'off' }}
        attributes:
          active_leaks: >
            {% set leaks = states.binary_sensor | selectattr('state','eq','on')
                | selectattr('attributes.device_class','defined')
                | selectattr('attributes.device_class','eq','problem')
                | selectattr('entity_id','search','_low_flow_leak|_tank_refill_leak|_intelligent_leak') | list %}
            {{ leaks | map(attribute='entity_id') | list }}
      - name: Water Monitor Synthetic Active
        unique_id: water_monitor_synthetic_active
        state: >
          {# Heuristic: explicit test mode OR synthetic flow number > 0 #}
          {% set test_mode = is_state('input_boolean.water_monitor_test_mode','on') %}
          {% set synth_numbers = states.number | selectattr('entity_id','search','_synthetic_flow_gpm') | list %}
          {% set synth_flow = (synth_numbers[0].state | float(0)) if synth_numbers|length > 0 else 0 %}
          {% set active = test_mode or synth_flow > 0 %}
          {{ 'on' if active else 'off' }}

#############################################
# Core Automation: Water Monitor Orchestrator
#
# Option B (targeted triggers): Replaces the prior broad state_changed event
# trigger. Focused state triggers (wildcards) for Water Monitor entities,
# plus explicit valve + periodic tick + mobile actions, cut invocation
# frequency massively (only on relevant entity changes) while still
# dynamically discovering new leak/health/session sensors via globs.
#
# Edit points (search for EDIT ME):
#   1. valve_entity variable (if you have a shutoff valve)
#   2. notify_service if not notify.mark
# If you have multiple valves, add additional valve entity IDs to the
# valve state trigger block.
#############################################
automation:
  - id: water_monitor_orchestrator
    alias: Water Monitor Orchestrator
    mode: restart
    description: Unified leak, valve, high usage, reminders, and upstream health notifications.
    variables:
      valve_entity: ""  # EDIT ME: e.g. switch.main_water_valve or valve.main_water
      notify_service: notify.mark  # EDIT ME if different
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.water_monitor_low_flow_leak          # comment out if not created
          - binary_sensor.water_monitor_tank_refill_leak       # optional
          - binary_sensor.water_monitor_intelligent_leak       # optional / experimental
      - platform: state
        entity_id:
          - binary_sensor.water_monitor_upstream_health
      - platform: state
        entity_id:
          - sensor.water_monitor_last_session_volume           # duplicate line per instance if multiple
      - platform: state
        entity_id: input_boolean.water_monitor_notifications_enabled  # dummy valve fallback; replace with your valve entity if set
      - platform: time_pattern
        minutes: "/1"
      - platform: event
        event_type: mobile_app_notification_action
    condition: []
    variables:
      valve_state_entity: "{{ valve_entity if valve_entity != '' else 'input_boolean.water_monitor_notifications_enabled' }}"
      now_ts: "{{ now().timestamp() }}"
      snooze_until: >
        {% set dt = states('input_datetime.water_monitor_snooze_until') %}
        {% if dt in ('unknown','unavailable','') %}0{% else %}{{ as_timestamp(strptime(dt, '%Y-%m-%d %H:%M:%S')) }}{% endif %}
      snoozed: "{{ now().timestamp() < snooze_until }}"
      large_threshold: "{{ states('input_number.water_monitor_large_session_volume') | float(25) }}"
      reminder_interval_min: "{{ states('input_number.water_monitor_valve_reminder_interval') | int(10) }}"
      snooze_minutes: "{{ states('input_number.water_monitor_snooze_minutes') | int(30) }}"
      last_reminder_ts: >
        {% set dt = states('input_datetime.water_monitor_last_leak_reminder') %}
        {% if dt in ('unknown','unavailable','') %}0{% else %}{{ as_timestamp(strptime(dt, '%Y-%m-%d %H:%M:%S')) }}{% endif %}
