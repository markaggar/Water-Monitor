# Alternative package using Integration sensor for volume (no tick automation needed)
# Place under config/packages/ and include_dir_named from configuration.yaml

input_number:
  water_test_flow_gpm:
    name: Water Test Flow (gpm)
    min: 0
  max: 50
    step: 0.1

  sim_tank_leak_base:
    name: Sim Tank Leak Base (gpm)
    min: 0
    max: 2
    step: 0.01
    initial: 0.2

  sim_tank_leak_last_jitter:
    name: Sim Tank Leak Last Jitter (gpm)
    min: -1
    max: 1
    step: 0.001
    initial: 0

input_boolean:
  sim_random_usage_enabled:
    name: Sim Random Usage Enabled
  sim_tank_leak_active:
    name: Sim Tank Leak Active

template:
  - trigger:
      - platform: time_pattern
        seconds: "/30"
      - platform: state
        entity_id: input_number.water_test_flow_gpm
    sensor:
      - name: Water Test Flow Sampled
        unique_id: water_test_flow_sampled
        state: "{{ states('input_number.water_test_flow_gpm')|float(0) }}"
        unit_of_measurement: "gal/min"
        state_class: measurement
        attributes:
          last_sample: "{{ now().isoformat() }}"

sensor:
  - platform: integration
    source: sensor.water_test_flow_sampled
    name: Water Test Volume (integrated)
    unit_time: min
    method: left
    max_sub_interval: 1
    round: 3

script:
  sim_adjust_flow:
    alias: Adjust Simulated Flow by Delta (gpm)
    mode: queued
    fields:
      delta:
        description: Signed delta in gpm
        example: 0.6
    sequence:
    - variables:
      cand: "{{ states('input_number.water_test_flow_gpm')|float(0) + (delta|float) }}"
      nonneg: "{{ [ cand|float, 0 ] | max }}"
      maxval: "{{ state_attr('input_number.water_test_flow_gpm','max')|float(50) }}"
      new_val: "{{ [ nonneg|float, maxval ] | min | round(3) }}"
    - service: input_number.set_value
        data:
          value: "{{ new_val }}"
        target:
          entity_id: input_number.water_test_flow_gpm

  sim_event_faucet:
    alias: Simulate Faucet (random duration)
    mode: parallel
    sequence:
      - variables:
          delta: 0.6
          dur_s: "{{ range(5, 61) | random }}"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ delta }}"
      - delay: "{{ dur_s }}s"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ -1 * (delta|float) }}"

  sim_event_shower:
    alias: Simulate Shower (random duration)
    mode: parallel
    sequence:
      - variables:
          delta: 2.2
          dur_s: "{{ range(180, 901) | random }}"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ delta }}"
      - delay: "{{ dur_s }}s"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ -1 * (delta|float) }}"

  sim_event_washer:
    alias: Simulate Washing Machine (bursty fills)
    mode: parallel
    sequence:
      - variables:
          # HE washer ~12–20 gal per cycle; model 3–4 fill bursts at ~2.5 gpm
          bursts: "{{ 3 if (range(1,101)|random) <= 65 else 4 }}"
      - repeat:
          count: "{{ bursts | int(3) }}"
          sequence:
            - variables:
                delta: 2.5
                dur_s: "{{ range(60, 121) | random }}"  # 1–2 minutes per fill
            - service: script.sim_adjust_flow
              data:
                delta: "{{ delta }}"
            - delay: "{{ dur_s }}s"
            - service: script.sim_adjust_flow
              data:
                delta: "{{ -1 * (delta|float) }}"
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ not repeat.last }}"
                  sequence:
                    - delay: "{{ range(180, 481) | random }}s"  # 3–8 minutes between fills

  sim_event_toilet:
    alias: Simulate Toilet Flush (random duration)
    mode: parallel
    sequence:
      - variables:
          delta: 1.6
          dur_s: "{{ range(5, 13) | random }}"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ delta }}"
      - delay: "{{ dur_s }}s"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ -1 * (delta|float) }}"

  sim_event_dishwasher:
    alias: Simulate Dishwasher (bursty, efficient)
    mode: parallel
    sequence:
      - variables:
          # Efficient dishwasher ~3–5 gal per cycle; model as 2–3 short fill bursts
          bursts: "{{ 2 if (range(1,101)|random) <= 70 else 3 }}"
      - repeat:
          count: "{{ bursts | int(2) }}"
          sequence:
            - variables:
                delta: 1.2
                dur_s: "{{ range(45, 121) | random }}"  # 45–120 seconds per fill
            - service: script.sim_adjust_flow
              data:
                delta: "{{ delta }}"
            - delay: "{{ dur_s }}s"
            - service: script.sim_adjust_flow
              data:
                delta: "{{ -1 * (delta|float) }}"
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ not repeat.last }}"
                  sequence:
                    - delay: "{{ range(300, 901) | random }}s"  # 5–15 minutes between fills

  sim_event_irrigation:
    alias: Simulate Irrigation (random duration)
    mode: parallel
    sequence:
      - variables:
          delta: 3.5
          dur_s: "{{ range(600, 2401) | random }}"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ delta }}"
      - delay: "{{ dur_s }}s"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ -1 * (delta|float) }}"

  sim_flow_stop:
    alias: Stop Simulated Flow
    sequence:
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.water_test_flow_gpm

  sim_leak_start:
    alias: Start Simulated Leak (0.2 gpm for 20 min)
    mode: restart
    sequence:
      - service: script.sim_adjust_flow
        data:
          delta: 0.2
      - delay: "00:20:00"
      - service: script.sim_adjust_flow
        data:
          delta: -0.2

  sim_normal_shower:
    alias: Simulate Normal Shower (2.2 gpm for 8 min)
    mode: restart
    sequence:
      - service: input_number.set_value
        data:
          value: 2.2
        target:
          entity_id: input_number.water_test_flow_gpm
      - delay: "00:08:00"
      - service: script.sim_flow_stop

  sim_tank_leak_start:
    alias: Start Simulated Tank Leak
    mode: restart
    sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.sim_tank_leak_active
      - service: script.sim_adjust_flow
        data:
          delta: "{{ states('input_number.sim_tank_leak_base')|float(0.2) }}"

  sim_tank_leak_stop:
    alias: Stop Simulated Tank Leak
    mode: restart
    sequence:
      - variables:
          base: "{{ states('input_number.sim_tank_leak_base')|float(0.2) }}"
          last: "{{ states('input_number.sim_tank_leak_last_jitter')|float(0) }}"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ -1 * (base + last) }}"
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.sim_tank_leak_last_jitter
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sim_tank_leak_active

  sim_seed_baselines:
    alias: Seed Water Monitor Baselines (14 days)
    sequence:
      - service: water_monitor.simulate_history
        data:
          days: 14
          include_irrigation: true

automation:
  - id: water_monitor_sim_log_on_update_integ
    alias: Log Intelligent Leak Attributes (Integration volume)
    mode: queued
    trigger:
      - platform: state
        entity_id: binary_sensor.water_monitor_intelligent_leak
    action:
      - variables:
          attrs: "{{ state_attr('binary_sensor.water_monitor_intelligent_leak', 'friendly_name') }} | ready={{ state_attr('binary_sensor.water_monitor_intelligent_leak','baseline_ready') }} p={{ state_attr('binary_sensor.water_monitor_intelligent_leak','chosen_percentile') }} thr_s={{ state_attr('binary_sensor.water_monitor_intelligent_leak','effective_threshold_s') }} risk={{ state_attr('binary_sensor.water_monitor_intelligent_leak','risk') }} reasons={{ state_attr('binary_sensor.water_monitor_intelligent_leak','reasons') }}"
      - service: system_log.write
        data:
          level: info
          message: "Intelligent Leak Update: {{ attrs }}"

  - id: sim_random_usage_scheduler
    alias: Simulate Random Household Usage (scheduler)
    mode: parallel
    trigger:
      - platform: time_pattern
        seconds: "/5"
    condition:
      - condition: state
        entity_id: input_boolean.sim_random_usage_enabled
        state: "on"
    action:
      - variables:
          r_faucet: "{{ range(1,101)|random }}"       # ~8%/tick
          r_toilet: "{{ range(1,101)|random }}"       # ~2%/tick
          r_dish:   "{{ range(1,101)|random }}"       # ~1%/tick
          r_washer: "{{ range(1,301)|random }}"       # ~0.33%/tick
          r_shower: "{{ range(1,301)|random }}"       # ~0.33%/tick
          r_irrig:  "{{ range(1,601)|random }}"       # ~0.17%/tick
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (r_faucet | int(0)) <= 8 }}"
            sequence:
              - service: script.sim_event_faucet
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (r_toilet | int(0)) <= 2 }}"
            sequence:
              - service: script.sim_event_toilet
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (r_dish | int(0)) <= 1 }}"
            sequence:
              - service: script.sim_event_dishwasher
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (r_washer | int(0)) <= 1 }}"
            sequence:
              - service: script.sim_event_washer
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (r_shower | int(0)) <= 1 }}"
            sequence:
              - service: script.sim_event_shower
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (r_irrig | int(0)) <= 1 }}"
            sequence:
              - service: script.sim_event_irrigation

  - id: sim_tank_leak_jitter
    alias: Simulated Tank Leak Jitter
    mode: queued
    trigger:
      - platform: time_pattern
        seconds: "/15"
    condition:
      - condition: state
        entity_id: input_boolean.sim_tank_leak_active
        state: "on"
    action:
      - variables:
          # jitter range +/- 0.05 gpm
          new: "{{ ((range(-50, 51)|random)|float) / 1000.0 * 1.0 }}"  # -0.05..0.05 in steps of 0.001
          old: "{{ states('input_number.sim_tank_leak_last_jitter')|float(0) }}"
          adj: "{{ (new|float) - (old|float) }}"
      - service: script.sim_adjust_flow
        data:
          delta: "{{ adj }}"
      - service: input_number.set_value
        data:
          value: "{{ new }}"
        target:
          entity_id: input_number.sim_tank_leak_last_jitter
